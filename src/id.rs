//! # Ids
//!
//! [`Id`]s are unique identifiers for views.
//! They're used to identify views in the view tree.
//!

use std::{any::Any, cell::RefCell, collections::HashMap, sync::atomic::AtomicU64};

use kurbo::{Point, Rect};

use crate::{
    animate::Animation,
    context::{EventCallback, MenuCallback, ResizeCallback},
    event::EventListener,
    style::{Style, StyleClassRef, StyleSelector},
    update::{UpdateMessage, CENTRAL_DEFERRED_UPDATE_MESSAGES, CENTRAL_UPDATE_MESSAGES},
    view_data::{ChangeFlags, StackOffset},
};

thread_local! {
    pub(crate) static ID_PATHS: RefCell<HashMap<Id,IdPath>> = Default::default();
}

#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Hash)]
/// A stable identifier for an element.
pub struct Id(u64);

#[derive(Clone, Default, Debug)]
pub struct IdPath(pub(crate) Vec<Id>);

impl IdPath {
    /// Returns the slice of the ids including the first id identifying the window.
    pub(crate) fn dispatch(&self) -> &[Id] {
        &self.0[..]
    }
}

impl Id {
    /// Allocate a new, unique `Id`.
    pub fn next() -> Id {
        static WIDGET_ID_COUNTER: AtomicU64 = AtomicU64::new(0);
        Id(WIDGET_ID_COUNTER.fetch_add(1, std::sync::atomic::Ordering::Relaxed))
    }

    pub fn to_raw(self) -> u64 {
        self.0
    }

    pub fn new(&self) -> Id {
        let mut id_path =
            ID_PATHS.with(|id_paths| id_paths.borrow().get(self).cloned().unwrap_or_default());
        let new_id = if id_path.0.is_empty() {
            // if id_path is empty, it means the id was generated by next() and it's not
            // tracked yet, so we can just reuse it
            *self
        } else {
            Self::next()
        };
        id_path.0.push(new_id);
        ID_PATHS.with(|id_paths| {
            id_paths.borrow_mut().insert(new_id, id_path);
        });
        new_id
    }

    pub(crate) fn set_parent(&self, parent: Id) {
        ID_PATHS.with(|id_paths| {
            let mut id_paths = id_paths.borrow_mut();
            let mut id_path = id_paths.get(&parent).cloned().unwrap();
            id_path.0.push(*self);
            id_paths.insert(*self, id_path);
        });
    }

    pub fn parent(&self) -> Option<Id> {
        ID_PATHS.with(|id_paths| {
            id_paths.borrow().get(self).and_then(|id_path| {
                let id_path = &id_path.0;
                let len = id_path.len();
                if len >= 2 {
                    Some(id_path[len - 2])
                } else {
                    None
                }
            })
        })
    }

    pub fn id_path(&self) -> Option<IdPath> {
        ID_PATHS.with(|id_paths| id_paths.borrow().get(self).cloned())
    }

    pub fn has_id_path(&self) -> bool {
        ID_PATHS.with(|id_paths| id_paths.borrow().contains_key(self))
    }

    pub fn remove_id_path(&self) {
        ID_PATHS.with(|id_paths| id_paths.borrow_mut().remove(self));
    }

    pub fn root_id(&self) -> Option<Id> {
        ID_PATHS.with(|id_paths| {
            id_paths
                .borrow()
                .get(self)
                .and_then(|path| path.0.first().copied())
        })
    }
}
